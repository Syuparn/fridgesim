// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/syuparn/fridgesim/ent/ingredient"
)

// Ingredient is the model entity for the Ingredient schema.
type Ingredient struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ingredient) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case ingredient.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case ingredient.FieldID, ingredient.FieldKind:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Ingredient", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ingredient fields.
func (i *Ingredient) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case ingredient.FieldID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value.Valid {
				i.ID = value.String
			}
		case ingredient.FieldKind:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[j])
			} else if value.Valid {
				i.Kind = value.String
			}
		case ingredient.FieldAmount:
			if value, ok := values[j].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[j])
			} else if value.Valid {
				i.Amount = value.Float64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Ingredient.
// Note that you need to call Ingredient.Unwrap() before calling this method if this Ingredient
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Ingredient) Update() *IngredientUpdateOne {
	return (&IngredientClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Ingredient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Ingredient) Unwrap() *Ingredient {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ingredient is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Ingredient) String() string {
	var builder strings.Builder
	builder.WriteString("Ingredient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("kind=")
	builder.WriteString(i.Kind)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", i.Amount))
	builder.WriteByte(')')
	return builder.String()
}

// Ingredients is a parsable slice of Ingredient.
type Ingredients []*Ingredient

func (i Ingredients) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
