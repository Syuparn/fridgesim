// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/syuparn/fridgesim/ent/ingredient"
)

// IngredientCreate is the builder for creating a Ingredient entity.
type IngredientCreate struct {
	config
	mutation *IngredientMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetKind sets the "kind" field.
func (ic *IngredientCreate) SetKind(s string) *IngredientCreate {
	ic.mutation.SetKind(s)
	return ic
}

// SetAmount sets the "amount" field.
func (ic *IngredientCreate) SetAmount(f float64) *IngredientCreate {
	ic.mutation.SetAmount(f)
	return ic
}

// SetID sets the "id" field.
func (ic *IngredientCreate) SetID(s string) *IngredientCreate {
	ic.mutation.SetID(s)
	return ic
}

// Mutation returns the IngredientMutation object of the builder.
func (ic *IngredientCreate) Mutation() *IngredientMutation {
	return ic.mutation
}

// Save creates the Ingredient in the database.
func (ic *IngredientCreate) Save(ctx context.Context) (*Ingredient, error) {
	var (
		err  error
		node *Ingredient
	)
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IngredientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ingredient)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from IngredientMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IngredientCreate) SaveX(ctx context.Context) *Ingredient {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IngredientCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IngredientCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IngredientCreate) check() error {
	if _, ok := ic.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Ingredient.kind"`)}
	}
	if _, ok := ic.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Ingredient.amount"`)}
	}
	if v, ok := ic.mutation.ID(); ok {
		if err := ingredient.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Ingredient.id": %w`, err)}
		}
	}
	return nil
}

func (ic *IngredientCreate) sqlSave(ctx context.Context) (*Ingredient, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Ingredient.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (ic *IngredientCreate) createSpec() (*Ingredient, *sqlgraph.CreateSpec) {
	var (
		_node = &Ingredient{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ingredient.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: ingredient.FieldID,
			},
		}
	)
	_spec.OnConflict = ic.conflict
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Kind(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ingredient.FieldKind,
		})
		_node.Kind = value
	}
	if value, ok := ic.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ingredient.FieldAmount,
		})
		_node.Amount = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ingredient.Create().
//		SetKind(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IngredientUpsert) {
//			SetKind(v+v).
//		}).
//		Exec(ctx)
func (ic *IngredientCreate) OnConflict(opts ...sql.ConflictOption) *IngredientUpsertOne {
	ic.conflict = opts
	return &IngredientUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ingredient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *IngredientCreate) OnConflictColumns(columns ...string) *IngredientUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &IngredientUpsertOne{
		create: ic,
	}
}

type (
	// IngredientUpsertOne is the builder for "upsert"-ing
	//  one Ingredient node.
	IngredientUpsertOne struct {
		create *IngredientCreate
	}

	// IngredientUpsert is the "OnConflict" setter.
	IngredientUpsert struct {
		*sql.UpdateSet
	}
)

// SetKind sets the "kind" field.
func (u *IngredientUpsert) SetKind(v string) *IngredientUpsert {
	u.Set(ingredient.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *IngredientUpsert) UpdateKind() *IngredientUpsert {
	u.SetExcluded(ingredient.FieldKind)
	return u
}

// SetAmount sets the "amount" field.
func (u *IngredientUpsert) SetAmount(v float64) *IngredientUpsert {
	u.Set(ingredient.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *IngredientUpsert) UpdateAmount() *IngredientUpsert {
	u.SetExcluded(ingredient.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *IngredientUpsert) AddAmount(v float64) *IngredientUpsert {
	u.Add(ingredient.FieldAmount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Ingredient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ingredient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IngredientUpsertOne) UpdateNewValues() *IngredientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ingredient.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ingredient.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IngredientUpsertOne) Ignore() *IngredientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IngredientUpsertOne) DoNothing() *IngredientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IngredientCreate.OnConflict
// documentation for more info.
func (u *IngredientUpsertOne) Update(set func(*IngredientUpsert)) *IngredientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IngredientUpsert{UpdateSet: update})
	}))
	return u
}

// SetKind sets the "kind" field.
func (u *IngredientUpsertOne) SetKind(v string) *IngredientUpsertOne {
	return u.Update(func(s *IngredientUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *IngredientUpsertOne) UpdateKind() *IngredientUpsertOne {
	return u.Update(func(s *IngredientUpsert) {
		s.UpdateKind()
	})
}

// SetAmount sets the "amount" field.
func (u *IngredientUpsertOne) SetAmount(v float64) *IngredientUpsertOne {
	return u.Update(func(s *IngredientUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *IngredientUpsertOne) AddAmount(v float64) *IngredientUpsertOne {
	return u.Update(func(s *IngredientUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *IngredientUpsertOne) UpdateAmount() *IngredientUpsertOne {
	return u.Update(func(s *IngredientUpsert) {
		s.UpdateAmount()
	})
}

// Exec executes the query.
func (u *IngredientUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IngredientCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IngredientUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IngredientUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: IngredientUpsertOne.ID is not supported by MySQL driver. Use IngredientUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IngredientUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IngredientCreateBulk is the builder for creating many Ingredient entities in bulk.
type IngredientCreateBulk struct {
	config
	builders []*IngredientCreate
	conflict []sql.ConflictOption
}

// Save creates the Ingredient entities in the database.
func (icb *IngredientCreateBulk) Save(ctx context.Context) ([]*Ingredient, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Ingredient, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IngredientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IngredientCreateBulk) SaveX(ctx context.Context) []*Ingredient {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IngredientCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IngredientCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ingredient.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IngredientUpsert) {
//			SetKind(v+v).
//		}).
//		Exec(ctx)
func (icb *IngredientCreateBulk) OnConflict(opts ...sql.ConflictOption) *IngredientUpsertBulk {
	icb.conflict = opts
	return &IngredientUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ingredient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *IngredientCreateBulk) OnConflictColumns(columns ...string) *IngredientUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &IngredientUpsertBulk{
		create: icb,
	}
}

// IngredientUpsertBulk is the builder for "upsert"-ing
// a bulk of Ingredient nodes.
type IngredientUpsertBulk struct {
	create *IngredientCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ingredient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ingredient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IngredientUpsertBulk) UpdateNewValues() *IngredientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ingredient.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ingredient.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IngredientUpsertBulk) Ignore() *IngredientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IngredientUpsertBulk) DoNothing() *IngredientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IngredientCreateBulk.OnConflict
// documentation for more info.
func (u *IngredientUpsertBulk) Update(set func(*IngredientUpsert)) *IngredientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IngredientUpsert{UpdateSet: update})
	}))
	return u
}

// SetKind sets the "kind" field.
func (u *IngredientUpsertBulk) SetKind(v string) *IngredientUpsertBulk {
	return u.Update(func(s *IngredientUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *IngredientUpsertBulk) UpdateKind() *IngredientUpsertBulk {
	return u.Update(func(s *IngredientUpsert) {
		s.UpdateKind()
	})
}

// SetAmount sets the "amount" field.
func (u *IngredientUpsertBulk) SetAmount(v float64) *IngredientUpsertBulk {
	return u.Update(func(s *IngredientUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *IngredientUpsertBulk) AddAmount(v float64) *IngredientUpsertBulk {
	return u.Update(func(s *IngredientUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *IngredientUpsertBulk) UpdateAmount() *IngredientUpsertBulk {
	return u.Update(func(s *IngredientUpsert) {
		s.UpdateAmount()
	})
}

// Exec executes the query.
func (u *IngredientUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IngredientCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IngredientCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IngredientUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
