// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/syuparn/fridgesim/ent/ingredient"
	"github.com/syuparn/fridgesim/ent/predicate"
)

// IngredientUpdate is the builder for updating Ingredient entities.
type IngredientUpdate struct {
	config
	hooks    []Hook
	mutation *IngredientMutation
}

// Where appends a list predicates to the IngredientUpdate builder.
func (iu *IngredientUpdate) Where(ps ...predicate.Ingredient) *IngredientUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetKind sets the "kind" field.
func (iu *IngredientUpdate) SetKind(s string) *IngredientUpdate {
	iu.mutation.SetKind(s)
	return iu
}

// SetAmount sets the "amount" field.
func (iu *IngredientUpdate) SetAmount(f float64) *IngredientUpdate {
	iu.mutation.ResetAmount()
	iu.mutation.SetAmount(f)
	return iu
}

// AddAmount adds f to the "amount" field.
func (iu *IngredientUpdate) AddAmount(f float64) *IngredientUpdate {
	iu.mutation.AddAmount(f)
	return iu
}

// Mutation returns the IngredientMutation object of the builder.
func (iu *IngredientUpdate) Mutation() *IngredientMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IngredientUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IngredientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IngredientUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IngredientUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IngredientUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *IngredientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ingredient.Table,
			Columns: ingredient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: ingredient.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ingredient.FieldKind,
		})
	}
	if value, ok := iu.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ingredient.FieldAmount,
		})
	}
	if value, ok := iu.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ingredient.FieldAmount,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingredient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// IngredientUpdateOne is the builder for updating a single Ingredient entity.
type IngredientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IngredientMutation
}

// SetKind sets the "kind" field.
func (iuo *IngredientUpdateOne) SetKind(s string) *IngredientUpdateOne {
	iuo.mutation.SetKind(s)
	return iuo
}

// SetAmount sets the "amount" field.
func (iuo *IngredientUpdateOne) SetAmount(f float64) *IngredientUpdateOne {
	iuo.mutation.ResetAmount()
	iuo.mutation.SetAmount(f)
	return iuo
}

// AddAmount adds f to the "amount" field.
func (iuo *IngredientUpdateOne) AddAmount(f float64) *IngredientUpdateOne {
	iuo.mutation.AddAmount(f)
	return iuo
}

// Mutation returns the IngredientMutation object of the builder.
func (iuo *IngredientUpdateOne) Mutation() *IngredientMutation {
	return iuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IngredientUpdateOne) Select(field string, fields ...string) *IngredientUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Ingredient entity.
func (iuo *IngredientUpdateOne) Save(ctx context.Context) (*Ingredient, error) {
	var (
		err  error
		node *Ingredient
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IngredientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ingredient)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from IngredientMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IngredientUpdateOne) SaveX(ctx context.Context) *Ingredient {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IngredientUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IngredientUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *IngredientUpdateOne) sqlSave(ctx context.Context) (_node *Ingredient, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ingredient.Table,
			Columns: ingredient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: ingredient.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ingredient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ingredient.FieldID)
		for _, f := range fields {
			if !ingredient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ingredient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ingredient.FieldKind,
		})
	}
	if value, ok := iuo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ingredient.FieldAmount,
		})
	}
	if value, ok := iuo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: ingredient.FieldAmount,
		})
	}
	_node = &Ingredient{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingredient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
